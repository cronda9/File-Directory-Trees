Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Christian Ronda

------------------------------------------------------------------------
Student 2: What is your name?

Benjamin Herber

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page to this section of the
readme file, and edit it as appropriate.



------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page to this section of the
readme file, and edit it as appropriate.



------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.



------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.



------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does critTer generate on checker.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

```

```

------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

For ft.c:
```
   ft.c: line 578: low priority: 
   A file should contain no more than 15 functions;
   this file contains 17 functions

   ft.c: line 251: medium priority:
   Do you want to validate 'contents' through an assert?

   ft.c: line 366: medium priority:
   Do you want to validate 'newContents' through an assert?

   ft.c: line 512: medium priority:
   Do you want to validate 'type' through an assert?

   ft.c: line 512: medium priority:
   Do you want to validate 'length' through an assert?

   a4def.h: line 18: high priority: 
   A comment should appear above each global variable.

   ft.c: line 577: low priority: 
   A source code file should contain fewer than 500 lines;
   this file contains 578 lines

   ft.c: line 56: low priority: 
   This area is deeply nested at level 4, consider refactoring
```

For node.c:
```
   node.c: line 354: low priority: 
   A file should contain no more than 15 functions;
   this file contains 16 functions

   node.c: line 82: medium priority:
   Do you want to validate 'newContents' through an assert?

   node.c: line 131: medium priority:
   Do you want to validate 'contents' through an assert?

   node.c: line 234: medium priority:
   Do you want to validate 'childID' through an assert?

   a4def.h: line 18: high priority: 
   A comment should appear above each global variable.
```

All of the assert checks are that way because those arguments are
not required to be given (and are therefore checked with if statements
in the code). As for the a4def.h one, it is not our code so we cannot
comment on it. for the number of functions and module size complaints,
the interface to ft.h already has 12 required functions so the necessary
helper methods to do recursion without a queue or stack ADT it was
necessary to go over the 15. For over 15 in Node, we paired it down a
lot and even tried with a FileNode ADT as well but it made the whole
thing way to cluttered and had way to many corner cases so this was best
for clarity and encapsulation still holds as a Node in a file tree can
either be a Dir or File, just exactly what fields they have available
change with whatever flag they are assigned because a file is
essentially special type of dir in our implementation. The nested thing
is necessary for preorder recursion and it hurt clarity in our eyes to
break it up into other functions.

------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

None

------------------------------------------------------------------------
What warnings does splint generate on Part 3, and what are your
disagreements with them? Copy the splint warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

None

------------------------------------------------------------------------
For each of the first three faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_insertPath() -> Line 22
---------------------------------------------------------------
         ./bdtBad2        strcat() inside BDT_insertPath() -> Line 40
---------------------------------------------------------------
         ./bdtBad3        rmPath() -> Line 96
===============================================================

For bdtBad4, you do not have to find the bug. Instead, indicate what
is different about trying to debug this executable in gdb versus the
other three:

It is a little different to debug because nothing crashes and you
just have some garbage mixed in with your output. So you actually have
to try and determine what went wrong use breaks, printing and other
methods available to you in gdb.

For bdtBad5, you do not have to find the bug. Instead, indicate one
hypothesis for how the program could crash within the DynArray module,
which we promise is itself correct:

There may not be any nodes within the DynArray ADT when we call map() so
the callback function will fail it's assertion. Essentially, either the
BDT is empty or the PreOrderTraversal isn't storing the nodes into the 
nodes DynArray properly so it fails to map to non-null values or the
dynArray is being sized to big at the beginning.

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

The main things we noticed were that Node has a lot of bloat and
unnecessary functions exposed in the interface. For instance,
Node_hasChild and Node_Compare are only used in the node.c and never
by dt.c therefore they should be made static. As for Node_addChild,
it is never used by either DT or the Node implementation so it should be
removed.

Note: Ask about it

to_String not ever used in node

------------------------------------------------------------------------
